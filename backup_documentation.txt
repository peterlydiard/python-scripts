**Purpose of Script: backup.py**

The purpose of this script is to perform an incremental backup of specified source directories to a backup base directory. It ensures that the backup directories and files are valid, and handles excluded directories during the backup process. The script also logs information about the backup operation.

**Inputs and Outputs:**

*Inputs:*
- `home_dir`: The home directory of the user.
- `source_dirs`: A list of source directories to be backed up.
- `backup_base_dir`: The base directory where backups are stored.
- `excluded_dirs`: A list of directories to be excluded from the backup.

*Outputs:*
- Incremental backup of specified source directories to the backup base directory.
- `backup_log.txt`: A log file containing information about the backup operation.
- Backup database text file (`backup_database_<datetime>.txt`) detailing the source and backup file paths, along with their MD5 hashes.

**General Operational Principles:**

1. **Directory Validation:**
   - The script checks if the source directories, backup base directory, and home directory exist and have the necessary permissions.
   - Errors are logged and displayed if any of the directories are invalid.

2. **Logging Configuration:**
   - Logging is configured to record the date and time of the backup operation.
   - Log messages are stored in `backup_log.txt`.

3. **Backup Process:**
   - The script performs an incremental backup by checking for new or modified files in the source directories.
   - It calculates the MD5 hash of each source file and compares it with the latest backup.
   - If the file is new or modified, it is copied to the appropriate backup directory structure under the backup base directory.
   - Backup progress is indicated by printing a dot (`.`) for each file processed.
   - Information about the backup operation, including the source file, backup file, and MD5 hash, is stored in the backup database text file.
   - The backup database text file is saved in the format `backup_database_<datetime>.txt` in the backup base directory.

4. **File Hash Calculation:**
   - MD5 hashes of source files and their backup copies are calculated and compared to ensure data integrity.
   - The MD5 hash of each source file is calculated and stored in the backup database text file.
   - During subsequent backups, the MD5 hash of the source file is compared with the hash stored in the database to detect changes.

5. **Backup Database:**
   - The backup database contains information about the source files, their corresponding backup paths, and MD5 hashes.
   - Each backup operation creates a new database file with a timestamp in its name, ensuring a record of each backup session.

6. **Backup Completion and Runtime Logging:**
   - After the backup operation is completed, the script logs the date and time, as well as the number of files included in the backup.
   - The overall runtime of the backup process is displayed to the user in seconds.

**Overall, the script provides an organized and systematic approach to incremental backups, ensuring data integrity and maintaining a detailed record of the backup history. It offers flexibility through configurations and error handling mechanisms, making it a reliable tool for regular data backup tasks.**